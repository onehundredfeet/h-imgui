typedef ImGuiString VoidPtr;

[Prefix="ImGuiColorEditFlags_"]
enum ImGuiColorEditFlags
{
	"None",
	"NoAlpha",
	"NoPicker",
	"NoOptions",
	"NoSmallPreview",
	"NoInputs",
	"NoTooltip",
	"NoLabel",
	"NoSidePreview",
	"NoDragDrop",
	"NoBorder",
	"AlphaBar",
	"AlphaPreview",
	"AlphaPreviewHalf",
	"HDR",
	"DisplayRGB",
	"DisplayHSV",
	"DisplayHex",
	"Uint8",
	"Float",
	"PickerHueBar",
	"PickerHueWheel",
	"InputRGB",
	"InputHSV",
	"DefaultOptions_",
	"DisplayMask_",
	"DataTypeMask_",
	"PickerMask_",
	"InputMask_"	
};

[Prefix="ImGuiWindowFlags_"]
enum ImGuiWindowFlags
{
	"None",
	"NoTitleBar",
	"NoResize",
	"NoMove",
	"NoScrollbar",
	"NoScrollWithMouse",
	"NoCollapse",
	"AlwaysAutoResize",
	"NoBackground",
	"NoSavedSettings",
	"NoMouseInputs",
	"MenuBar",
	"HorizontalScrollbar",
	"NoFocusOnAppearing",
	"NoBringToFrontOnFocus",
	"AlwaysVerticalScrollbar",
	"AlwaysHorizontalScrollbar",
	"NoNavInputs",
	"NoNavFocus",
	"UnsavedDocument",
	"NoNav",
	"NoDecoration",
	"NoInputs",
	"NoDocking"
};

[Prefix="ImGuiConfigFlags_"]
enum ImGuiConfigFlags
{
	"None",
	"NavEnableKeyboard",
	"NavEnableGamepad",
	"NavEnableSetMousePos",
	"NavNoCaptureKeyboard",
	"NoMouse",
	"NoMouseCursorChange",
	"DockingEnable",
	"ViewportsEnable",
	"DpiEnableScaleViewports",
	"DpiEnableScaleFonts",
	"IsSRGB",
	"IsTouchScreen"
};


// Plot styling variables.
[Prefix="ImPlotStyleVar_"]
enum ImPlotStyleVar {
    "LineWeight",         
    "Marker",             
    "MarkerSize",         
    "MarkerWeight",       
    "FillAlpha",          
    "ErrorBarSize",       
    "ErrorBarWeight",     
    "DigitalBitHeight",   
    "DigitalBitGap",      
    "PlotBorderSize",    
    "MinorAlpha",        
    "MajorTickLen",      
    "MinorTickLen",      
    "MajorTickSize",     
    "MinorTickSize",     
    "MajorGridSize",     
    "MinorGridSize",     
    "PlotPadding",        
    "LabelPadding",       
    "LegendPadding",     
    "LegendInnerPadding",
    "LegendSpacing",     
    "MousePosPadding",   
    "AnnotationPadding", 
    "FitPadding",         
    "PlotDefaultSize",    
    "PlotMinSize"       
};


interface StringCache {
	void StringCache();
	ImGuiString cache( String string );
	void free( ImGuiString string );
};

interface StringBuffer {
	void StringBuffer(int bufferSize);
	ImGuiString append(String string);
	ImGuiString set(String string);
	void reset();
};

interface ImGuiContext{

};

[NoDelete]
interface ImPlotContext {

};

[NoDelete]
interface ImPlot {
	[Static, Internal="ImPlot::BeginPlot"] bool beginPlot([Cast="char*"]ImGuiString text);
	[Static, Internal="ImPlot::EndPlot"] void endPlot();
	
	[Static, Internal="ImPlot::PlotBars"] void plotBarsS([Cast="char*"]ImGuiString label, float *bar_data, int data_count);
	[Static, Internal="ImPlot::PlotBars"] void plotBarsF([Cast="char*"]ImGuiString label, double *bar_data, int data_count);
	[Static, Internal="ImPlot::PlotBars"] void plotBarsI([Cast="char*"]ImGuiString label, int *bar_data, int data_count);

	[Static, Internal="ImPlot::PlotLine"] void plotLineS([Cast="char*"]ImGuiString label, float *data, int data_count, optional double xstart, optional int flags, optional int offset);
	[Static, Internal="ImPlot::PlotLine"] void plotLineXYS([Cast="char*"]ImGuiString label, float *data_x, float *data_y, int data_count);
	[Static, Internal="ImPlot::PlotLine"] void plotLineF([Cast="char*"]ImGuiString label, double *data, int data_count, optional double xstart, optional int flags, optional int offset);
	[Static, Internal="ImPlot::PlotLine"] void plotLineXYF([Cast="char*"]ImGuiString label, double *data_x, double *data_y, int data_count);

	[Static, Internal="ImPlot::SetupAxes"]  void setupAxes([Cast="char*"]ImGuiString horizontal, [Cast="char*"]ImGuiString vertical);
	[Static, Internal="ImPlot::SetupAxesLimits"]  void setupAxesLimits(double x_min, double x_max, double y_min, double y_max);

	[Static, Internal="ImPlot::PlotShaded"]  void plotShadedS([Cast="char*"]ImGuiString label, float *values, int count, optional double y_ref, double xscale, double x0, optional int flags, optional int offset, optional int stride);
	[Static, Internal="ImPlot::PlotShaded"]  void plotShadedXYS([Cast="char*"]ImGuiString label, float *xs, float *y2, int count, optional double y_ref, optional int flags, optional int offset);
	[Static, Internal="ImPlot::PlotShaded"]  void plotShadedF([Cast="char*"]ImGuiString label, double *values, int count, optional double y_ref, optional double xscale, optional double x0, optional int flags, optional int offset, optional int stride);
	[Static, Internal="ImPlot::PlotShaded"]  void plotShadedXYF([Cast="char*"]ImGuiString label, double *xs, double *y2, int count, optional double y_ref, optional int flags, optional int offset);
	[Static, Internal="ImPlot::PlotShaded"]  void plotShadedXYYF([Cast="char*"]ImGuiString label, double *xs, double *y1, double *y2, int count, optional int flags, optional int offset);

	[Static, Internal="ImPlot::PushStyleVar"]  void pushStyleVar(ImPlotStyleVar styleVar, float value);
	[Static, Internal="ImPlot::PopStyleVar"]  void popStyleVar(ImPlotStyleVar styleVar);

	[Static, Const, Internal="ImPlot::CreateContext"] ImPlotContext createContext();
	[Static, Internal="ImPlot::DestroyContext"] void destroyContext(optional ImPlotContext context);
};

interface ImGuiColor {
	void ImGuiColor();
	attribute float r;
	attribute float g;
	attribute float b;
	attribute float a;

	bool colorEdit4(ImGuiString text);
};

[Internal="HImGuiIO"]
interface ImGuiIO {
 	void addFontDefault();
    void buildFonts();
    void setFontTexID(VoidPtr id);
    void setDisplaySize(float x, float y);
	void setConfigFlags( int flags );
	void setConfigFlag(ImGuiConfigFlags flag);
	int getConfigFlags();
};

typedef ImGuiID uint;

[NoDelete]
interface ImGui {
	[Static, Internal="ImGui::CreateContext"] ImGuiContext createContext();
	[Static, Internal="HImGuiIO::getIO"] ImGuiIO getIO();
	[Static, Internal="ImGui::StyleColorsDark"] void styleColorsDark();
	[Static, Internal="ImGui::DestroyContext"] void destroyContext(ImGuiContext context);

	[Static, Internal="ImGui::GetID"] ImGuiID getID([Cast="char*"] ImGuiString name);

	[Static, Internal="ImGui::Separator"] void separator();
	[Static, Internal="ImGui::BeginGroup"] void beginGroup();
	[Static, Internal="ImGui::EndGroup"] void endGroup();
	[Static, Internal="ImGui::SameLine"] void sameLine(optional float offset_from_start_x, optional float spacing);
	[Static, Internal="ImGui::NewLine"] void newLine();

	[Static, Internal="ImGui::ColorEdit4"] bool colorEdit4([Cast="char*"] ImGuiString name, float *colors, int flags);

	[Static, Internal="HImGui::text"] void text(ImGuiString text);
	[Static, Internal="ImGui::TextUnformatted"] void textUnformatted([Cast="char*"]ImGuiString text);
	[Static, Internal="HImGui::textColored"] void textColored(float r, float g, float b, float a, ImGuiString text);
	[Static, Internal="HImGui::button"] bool button(ImGuiString label, optional float width, optional float height);

	[Static, Internal="HImGui::begin"] bool begin(ImGuiString label, optional int flags);
	[Static, Internal="HImGui::setNextWindowPos"] void setNextWindowPos(float x, float y, optional int flags);
	[Static, Internal="HImGui::setNextWindowSize"] void setNextWindowSize(float x, float y, optional int flags);
	[Static, Internal="ImGui::End"] void end();
	
	[Static, Internal="ImGui::BeginMenuBar"] bool beginMenuBar();
	[Static, Internal="ImGui::EndMenuBar"] void endMenuBar();
	[Static, Internal="ImGui::BeginMainMenuBar"] bool beginMainMenuBar();
	[Static, Internal="ImGui::EndMainMenuBar"] void endMainMenuBar();
	[Static, Internal="ImGui::BeginMenu"] bool beginMenu([Cast="char*"]ImGuiString label);
	[Static, Internal="ImGui::EndMenu"] void endMenu();

	[Static, Internal="ImGui::BeginTabBar"] bool beginTabBar([Cast="char*"]ImGuiString label, optional int flags);
	[Static, Internal="ImGui::EndTabBar"] void endTabBar();
	[Static, Internal="ImGui::BeginTabItem"] bool beginTabItem([Cast="char*"]ImGuiString label);
	[Static, Internal="ImGui::EndTabItem"] void endTabItem();

	[Static, Internal="ImGui::BeginItemTooltip"] bool beginItemTooltip();
	[Static, Internal="ImGui::BeginTooltip"] bool beginTooltip();
	[Static, Internal="ImGui::EndTooltip"] void endTooltip();
	[Static, Internal="HImGui::setTooltip"] void setTooltip(ImGuiString text);

	[Static, Internal="ImGui::PlotLines"] void plotLines([Cast="char*"]ImGuiString label, float *samples, int numSamples);


	[Static, Internal="ImGui::DockSpace"] ImGuiID dockSpace(ImGuiID id);
	[Static, Internal="ImGui::SetNextWindowDockID"] void setNextWindowDockID(ImGuiID id);
};

[NoDelete]
interface NetImgui {
	[Static, Internal="NetImgui::Startup"] bool startup();
	[Static, Internal="NetImgui::ConnectToApp"] void connectToApp(String clientName, String serverHost, int serverPort);
	[Static, Internal="NetImgui::IsConnected"] bool isConnected();
	[Static, Internal="NetImgui::IsConnectionPending"] bool isConnectionPending();
	//	[Static, Internal="NetImgui::SendDataTexture"] void sendDataTexture();
	//NETIMGUI_API	void				SendDataTexture(ImTextureID textureId, void* pData, uint16_t width, uint16_t height, eTexFormat format, uint32_t dataSize=0);

	[Static, Internal="NetImgui::NewFrame"] bool newFrame();
	[Static, Internal="NetImgui::EndFrame"] void endFrame();
	[Static, Internal="NetImgui::Shutdown"] void shutdown();
	[Static,Internal="NetImguiDebug"] void enableDebug();
};