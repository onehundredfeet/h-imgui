


[Internal="mirage::PointField<cinolib::vec2d>"]
interface PointField2Df {
	 void PointField2Df();
};

[Internal="mirage::CellLibrary"]
interface CellLibrary {
   void CellLibrary();

	bool load( String path );
	bool filter( String path );
	int getTagID( String tag );
};

[Internal="mirage::Noise", NoDelete]
interface Noise {
        [Static, Internal="mirage::Noise::poisson_grid"]
		void poissonGrid( [Deref] PointField2Df pf, double radius, [Deref, Cast="cinolib::vec2d *"] double2 min, [ Deref, Cast="cinolib::vec2d *"] double2 max, uint seed, int max_iterations);
};



[Internal="cinolib::Trimesh<>"]
interface Trimesh {
   void Trimesh();

	[Internal="edge_avg_length"]
   float edgeAvgLength();

};

interface HashBuilder {
	void HashBuilder();
	void reset(int64 seed);
	void addInt8( int v );
	void addInt16( int v );
	void addInt32( int v );
	void addInt64( int64 v );
	void addBytes( bytes b, int offset, int length );

	int64 getValue();
};

enum AttributeSemantic {
	"POSITION",
	"NORMAL",
	"TANGENT",
	"BITANGENT",
	"UV0",
	"UV1",
	"UV2",
	"UV3",
	"UV4",
	"UV5",
	"UV6",
	"UV7",
	"COLOR",
	"USER0",
	"USER1",
	"USER2",
	"USER3",
	"USER4",
	"USER5",
	"USER6",
	"USER7",
	"WEIGHT0",
	"WEIGHT1"
};

[Prefix="ATTR_"]
enum AttributeType {
	"FLOAT16",
	"FLOAT32",
	"FLOAT64",
	"UINT8",
	"UINT16",
	"UINT32",
	"UINT64"
};



interface PolyMesh {
	void PolyMesh();

	// Building
	void reserve( int polynodes );
	void reserveVertices( int count );
	void reserveIndices( int count );
	void reservePolys( int count );

	int addAttribute( String name, AttributeSemantic semantic, AttributeType type, int dimensions );

	int beginPolygon(int count );
	int endPolygon();

	// generation paradigm 1 - do not mix
	int addVertex();
	int addPolyIndex( int idx );
	void setAttribute1f( int vert, int attr, float x );
	void setAttribute2f( int vert, int attr, float x, float y );
	void setAttribute3f( int vert, int attr, float x, float y, float z );
	void setAttribute4f( int vert, int attr, float x, float y, float z, float w );

	// generation paradigm 2 - do not mix
	int beginPolyNode( );
	void setNodeAttribute1f( int attr, float x );
	void setNodeAttribute2f( int attr, float x, float y );
	void setNodeAttribute3f( int attr, float x, float y, float z );
	void setNodeAttribute4f( int attr, float x, float y, float z, float w );
	void setNodeAttribute1d( int attr, double x );
	void setNodeAttribute2d( int attr, double x, double y );
	void setNodeAttribute3d( int attr, double x, double y, double z );
	void setNodeAttribute4d( int attr, double x, double y, double z, double w );
	int endPolyNode();

	void getAttrMinf( int attr, float *array);
	void getAttrMaxf( int attr, float *arry);
	void getAttrMind( int attr, double *array);
	void getAttrMaxd( int attr, double *arry);

	[CObject, Internal="polymesh_getAttributeArrayf"]
	float [] getAttributeArrayf( int attr );
	void copyAttributes2f( int attr, int dim_a, int dim_b, float *o_ptr);

	//Query
	int numPolyNodes();
	int numVerts();
	int numPolys();
	int getIndices( int * indices );
	[Internal="getIndices"]
	int getIndicesAsArray( int [] indices );
	int getStride();
	void getInterleavedVertices( bytes data );
	int numAttributes();
	int getAttributeIndexBySemantic( AttributeSemantic semantic );
	int getAttributeOffset( int index );
	AttributeSemantic getAttributeSemantic( int index );
	AttributeType getAttributeType( int index );
	int getAttributeDimensions( int index );
	[STL] String getAttributeName(int index );

	//Procedures
	void removeDuplicateVerts();
	void convexTriangulate();
	void triangulateOptimal();
	void optimizeTriangleIndices();
	bool optimizeTriangleIndicesForOverdraw();
	void optimizeTriangleMemoryFetch();
};



[Internal="mirage::QuadrangulateSettings"]
interface QuadrangulateSettings {
	void QuadrangulateSettings();
	[Internal="pure_quad"]
	attribute bool pureQuad;
	[Internal="align_to_boundaries"]
	attribute bool alignToBoundaries;
	[Internal="smooth_iter"]
	attribute int smoothIter;
	attribute bool extrinsic;
};

[Internal="mirage::CellMesh<>"]
interface CellMesh {
	void CellMesh();

};
[Internal="mirage::VolumizeSettings"]
interface VolumizeSettings {
	void VolumizeSettings();
	attribute double cellHeight;
	attribute int verticalCellCount;

	void addBottomTag( uint tag, bool provide_flag, bool require_flag );
	void addSideTag( uint tag, bool provide_flag, bool require_flag );
	void addTopTag( uint tag, bool provide_flag, bool require_flag );
	
	//std::vector<uint> bottomProvides;
    //std::vector<uint> bottomRequires;
    //std::vector<uint> topProvides;
    //std::vector<uint> topRequires;
    //std::vector<uint> sidesProvides;
    //std::vector<uint> sidesRequires;
};

[Internal="mirage::CellPolyhedraMesh"]
interface CellPolyhedraMesh {
	void CellPolyhedraMesh();

};

[Internal="mirage::Surfacing", NoDelete]
interface Surfacing {
    [Static, Internal="mirage::Surfacing::points_to_trimesh"] void pointsToTrimesh( [Deref] PointField2Df pf, [Deref] Trimesh out_mesh);
//    [Static, Internal="mirage::Surfacing::quadrangulate_trimesh<>"] void quadrangulateTrimesh( [Deref] Trimesh triMeshInput, [Deref] QuadrangulateSettings settings, [Deref] CellMesh quadMesh);
	
};

[Internal="mirage::Translate", NoDelete]
interface Translate {
    [Static, Internal="mirage::Surfacing::points_to_trimesh"] 
	void pointsToTrimesh( [Deref] PointField2Df pf, [Deref] Trimesh out_mesh);
	
	[Static, Internal="mirage::Translation::cino_to_itm"]
	void polyMeshToIndexedTriMesh( [Deref] Polygonmesh pm, [Deref] IndexedTriMesh idm );

};

[Internal="cinolib::Polygonmesh<>"]
interface Polygonmesh {
	void Polygonmesh();
};

[Internal="mirage::IndexedTriMesh<>"]
interface IndexedTriMesh {
	void IndexedTriMesh();

	int vertexCount();
	int triangleCount();

	void getPositions( float *data );
	void getVertexNormals( float *data );
	void getIndices( uint *data );
};


[Internal="mirage::Cells", NoDelete]
interface Cells {
    [Static, Internal="mirage::Cells::volumize_sockets"] 
	void volumizeSockets( [Deref] CellMesh cellSockets,  [Deref] VolumizeSettings settings, [Deref] CellPolyhedraMesh outMesh);

    [Static, Internal="mirage::Cells::seedCellPossibilities"] 
	void seedCellPossibilities([Deref] CellPolyhedraMesh cellSockets, [Deref] CellLibrary lib);

	[Static, Internal="mirage::Cells::solve_cells"] 
	void solve_cells([Deref] CellPolyhedraMesh cellSockets, [Deref] CellLibrary lib);

	[Static, Internal="mirage::Cells::buildWorldMesh3D"] 
    void buildWorldMesh3D([Deref] CellPolyhedraMesh cellSockets, [Deref] CellLibrary cellLib, float cellHeight, [Deref] Polygonmesh worldMesh);


};


[Internal="PolyListIt"]
interface PartitionContourIt {
	void PartitionContourIt([Deref] PartitionComplexPoly poly);
	bool next();
	void reset();
	[Const, Internal="getPtr"] PartitionContour get();
};


[Internal="mirage::Partition::PolyList"]
interface PartitionComplexPoly {
	void PartitionComplexPoly();

	[Const, AddressOf] PartitionContour addContour();
	int numContours();
	[CObject, Internal="h_partition_polylist_iterate"] PartitionContourIt iterate();
	bool eliminateHoles([Deref] PartitionComplexPoly noHoles);
	bool toConvex([Deref] PartitionComplexPoly convex);
};

[Internal="mirage::Partition::Poly", NoDelete]
interface PartitionContour {
	[Internal="IsHole"] bool isHole();
	[Internal="GetNumPoints"] int numPoints( );
	[CObject,Internal="partition_contour_getpt"] void getPoint( int point, float2 pt );
	[CObject,Internal="partition_contour_setpts"] void setPoints( int count, float2 * pt, bool hole );
	[CObject,Internal="partition_contour_getpts"] void getPoints( float2 * pt );
};

interface GeneratorPlaneMesh {
	void GeneratorPlaneMesh( float size_x, float size_y, int segments_x, int segments_y);

	PolyMesh getPolyMesh();
};

[Internal="mirage::Voronoi"]
interface Voronoi {
	void Voronoi();

	void generate( int count, float *points_xy);
	void relax(int iterations);
	int numSites();

	PolyMesh getPolyMesh();
};