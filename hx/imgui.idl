typedef ImguiString VoidPtr;

[Prefix="ImGuiColorEditFlags_"]
enum ImGuiColorEditFlags
{
"None",
"NoAlpha",
"NoPicker",
"NoOptions",
"NoSmallPreview",
"NoInputs",
"NoTooltip",
"NoLabel",
"NoSidePreview",
"NoDragDrop",
"NoBorder",
"AlphaBar",
"AlphaPreview",
"AlphaPreviewHalf",
"HDR",
"DisplayRGB",
"DisplayHSV",
"DisplayHex",
"Uint8",
"Float",
"PickerHueBar",
"PickerHueWheel",
"InputRGB",
"InputHSV",
"DefaultOptions_",
"DisplayMask_",
"DataTypeMask_",
"PickerMask_",
"InputMask_"	
};

[Prefix="ImGuiWindowFlags_"]
enum ImGuiWindowFlags
{
	"None",
	"NoTitleBar",
	"NoResize",
	"NoMove",
	"NoScrollbar",
	"NoScrollWithMouse",
	"NoCollapse",
	"AlwaysAutoResize",
	"NoBackground",
	"NoSavedSettings",
	"NoMouseInputs",
	"MenuBar",
	"HorizontalScrollbar",
	"NoFocusOnAppearing",
	"NoBringToFrontOnFocus",
	"AlwaysVerticalScrollbar",
	"AlwaysHorizontalScrollbar",
	"NoNavInputs",
	"NoNavFocus",
	"UnsavedDocument",
	"NoNav",
	"NoDecoration",
	"NoInputs",
	"NoDocking"

};

interface StringCache {
	void StringCache();
	ImguiString cache( String string );
	void free( ImguiString string );
};


interface StringBuffer {
	void StringBuffer(int bufferSize);
	ImguiString append(String string);
	ImguiString set(String string);
	void reset();
};

interface ImGuiContext{

};

interface ImGuiColor {
	void ImGuiColor();
	attribute float r;
	attribute float g;
	attribute float b;
	attribute float a;

	bool colorEdit4(ImguiString text);
};

[Internal="HImGuiIO"]
interface ImGuiIO {
 	void addFontDefault();
    void buildFonts();
    void setFontTexID(VoidPtr id);
    void setDisplaySize(float x, float y);
};

[NoDelete]
interface ImGui {
	[Static, Internal="ImGui::CreateContext"] ImGuiContext createContext();
	[Static, Internal="HImGuiIO::getIO"] ImGuiIO getIO();
	[Static, Internal="ImGui::StyleColorsDark"] void styleColorsDark();
	[Static, Internal="ImGui::DestroyContext"] void destroyContext(ImGuiContext context);

	[Static, Internal="ImGui::Separator"] void separator();
	[Static, Internal="ImGui::ColorEdit4"] bool colorEdit4([Cast="char*"] ImguiString name, float *colors, int flags);

	[Static, Internal="HImGui::text"] void text(ImguiString text);
	[Static, Internal="ImGui::TextUnformatted"] void textUnformatted([Cast="char*"]ImguiString text);
	[Static, Internal="HImGui::textColored"] void textColored(float r, float g, float b, float a, ImguiString text);
	[Static, Internal="HImGui::button"] bool button(ImguiString label, optional float width, optional float height);
	[Static, Internal="ImGui::NewLine"] void newLine();

	[Static, Internal="HImGui::begin"] bool begin(ImguiString label, optional int flags);
	[Static, Internal="HImGui::setNextWindowPos"] void setNextWindowPos(float x, float y, optional int flags);
	[Static, Internal="HImGui::setNextWindowSize"] void setNextWindowSize(float x, float y, optional int flags);
	[Static, Internal="ImGui::End"] void end();
	
	[Static, Internal="ImGui::BeginMenuBar"] bool beginMenuBar();
	[Static, Internal="ImGui::EndMenuBar"] void endMenuBar();
	[Static, Internal="ImGui::BeginMainMenuBar"] bool beginMainMenuBar();
	[Static, Internal="ImGui::EndMainMenuBar"] void endMainMenuBar();
	[Static, Internal="ImGui::BeginMenu"] bool beginMenu([Cast="char*"]ImguiString label);
	[Static, Internal="ImGui::EndMenu"] void endMenu();


	[Static, Internal="ImGui::PlotLines"] void plotLines([Cast="char*"]ImguiString label, float *samples, int numSamples);
};

[NoDelete]
interface NetImgui {
	[Static, Internal="NetImgui::Startup"] bool startup();
	[Static, Internal="NetImgui::ConnectToApp"] void connectToApp(String clientName, String serverHost, int serverPort);
	[Static, Internal="NetImgui::IsConnected"] bool isConnected();
	[Static, Internal="NetImgui::IsConnectionPending"] bool isConnectionPending();
	//	[Static, Internal="NetImgui::SendDataTexture"] void sendDataTexture();
	//NETIMGUI_API	void				SendDataTexture(ImTextureID textureId, void* pData, uint16_t width, uint16_t height, eTexFormat format, uint32_t dataSize=0);

	[Static, Internal="NetImgui::NewFrame"] bool newFrame();
	[Static, Internal="NetImgui::EndFrame"] void endFrame();
	[Static, Internal="NetImgui::Shutdown"] void shutdown();
	[Static,Internal="NetImguiDebug"] void enableDebug();
};